package diff

import (
	"bufio"
	"fmt"
	"github.com/akoserwal/operator-sdk-manager/cmd/install"
	genutil "github.com/akoserwal/operator-sdk-manager/cmd/internal"
	"github.com/spf13/cobra"
	"os"
	"os/exec"
	"path/filepath"
	"time"
)

const Stamp = "15:04:05"

func NewCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "diff",
		Short: "diff between operators generated by version v1 and v2 of operator-sdk",
		Long:  "operator-sdk-manager diff v0.16.0 v0.17.0",
		RunE: diff,
	}

	return cmd
}

func diff(cmd *cobra.Command, args []string) error {
	if len(args) > 1  {
			version1 := args[0]
			version2 := args[1]

			if genutil.IsOperatorAvailable(version1) == false {
				install.InstallOperatorSdk(cmd, args)
			}

			if genutil.IsOperatorAvailable(version2) == false {
				args[0] = version2
				install.InstallOperatorSdk(cmd,args)
			}

			opSdkMgmrOperator := createOperatosDir()
			os.Chdir(opSdkMgmrOperator)
			timestamp := time.Now().Format(Stamp)

			generateOperator(version1)
			generateOperator(version2)
			output := generateDiff(version1, version2, timestamp)
			fmt.Println("Generated diff output:", opSdkMgmrOperator+"/"+output)


	} else {
		fmt.Println("Specify versions eg: operator-sdk-manager diff v0.16.0 v0.17.0")
	}

	return nil
}

func generateDiff(version1 string, version2 string, timestamp string) string {
	diffOutputFile, err := os.Create("diff-" + version1 + "-" + version2 + "-" + timestamp + ".patch")
	diffCmd := exec.Command("git", "diff", version1+"-op", version2+"-op")
	output, err := diffCmd.Output()
	if err != nil {
		diffCmd.Process.Release()
	}
	defer diffOutputFile.Close()
	diffOutput := string(output)
	WriteOutput(diffOutputFile, diffOutput)
	return diffOutputFile.Name()
}

func WriteOutput(diffOutputFile *os.File, diffOutput string) {
	writer := bufio.NewWriter(diffOutputFile)
	_, err :=writer.WriteString(diffOutput)
	if err != nil {
		fmt.Println(err)
	}
	writer.Flush()
}

func generateOperator(version string) {
	operatorv := filepath.Join(genutil.GetHomeDir(), ".osm/operators/", version+"-op")
	if _, err := os.Stat(operatorv); os.IsNotExist(err) {
		_, err := exec.Command(genutil.GetOperatorSdkFilePath(version), "new", version+"-op", "--repo", "github.com/akoserwal/operator-sdk-manager").Output()
		if err != nil {
			fmt.Println(err)
		}

	}
}

func createOperatosDir() string {
	home := genutil.GetHomeDir()
	opSdkMgmrOperator := filepath.Join(home, ".osm/operators")
	if _, err := os.Stat(opSdkMgmrOperator); os.IsNotExist(err) {
		os.MkdirAll(opSdkMgmrOperator, os.ModePerm)
	}
	return opSdkMgmrOperator
}
